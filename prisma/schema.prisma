// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Roles {
  id Int @id @db.Integer()
  roleName String @map("role_name") @db.VarChar(100)
  users Users[]

  @@map("roles")
}

model Users {
  id String @id @db.VarChar(100)
  password String @db.VarChar(100)
  name String @db.VarChar(100)
  role Roles @relation(fields: [roleID], references: [id])
  roleID Int @map("role_id") @db.Integer
  
  @@map("users")
}

model Employees {
  id String @id @db.VarChar(100)
  name String @db.VarChar(100)
  profilePicture String? @map("profile_picture") @db.VarChar(255)
  dateOfBirth DateTime @map("date_of_birth") @db.Date
  createdAt DateTime @map("created_at") @db.Timestamp()
  updatedAt DateTime @map("updated_at") @db.Timestamp()
  // dateOfHire DateTime? @db.Date
  // position Positions @relation(fields: [positionID], references: [id])
  // positionID Int @map("position_id") @db.Integer
  // crew Crews? @relation(fields: [crewID], references: [id])
  // crewID Int? @map("crew_id") @db.Integer  
  // base Bases? @relation(fields: [baseID], references: [id])
  // baseID Int? @map("base_id") @db.Integer
  // pit Pits? @relation(fields: [pitID], references: [id])
  // pitID Int? @map("pit_id") @db.Integer
  details EmployeeDetails?
  positions EmployeePositions[]

  @@map("employees")
}

model Pits {
  id Int @id @db.Integer
  name String @db.VarChar(100)
  employees EmployeeDetails[]

  @@map("pits")
}

model Bases {
  id Int @id @db.Integer
  name String @db.VarChar(100)
  employees EmployeeDetails[]

  @@map("bases")
}

model Crews {
  id Int @id @db.Integer
  name String @db.VarChar(100)
  employees EmployeeDetails[]

  @@map("crews")
}

model Positions {
  id Int @id @db.Integer
  name String @db.VarChar(100)
  
  positionDetails EmployeePositions[]

  @@map("positions")
}

model EmployeeDetails {
  id Int @id @default(autoincrement())
  employee Employees @relation(fields: [badgeNumber], references: [id])
  badgeNumber String @map("badge_number") @unique @db.VarChar(100)
  dateOfHire DateTime? @map("date_of_hire") @db.Date
  employeePositions EmployeePositions? @relation(fields: [positions], references: [id])
  positions Int? @map("emp_positions") @db.Integer
  crew Crews? @relation(fields: [crewID], references: [id])
  crewID Int? @map("crew_id") @db.Integer  
  base Bases? @relation(fields: [baseID], references: [id])
  baseID Int? @map("base_id") @db.Integer
  pit Pits? @relation(fields: [pitID], references: [id])
  pitID Int? @map("pit_id") @db.Integer
  createdAt DateTime @map("created_at") @db.Timestamp()
  updatedAt DateTime @map("updated_at") @db.Timestamp()

  @@map("emp_details")
}

model EmployeePositions {
  id Int @id @default(autoincrement())
  employee Employees @relation(fields: [badgeNumber], references: [id])
  badgeNumber String @map("badge_number") @db.VarChar(100)
  position Positions @relation(fields: [positionID], references: [id])
  positionID Int @map("position_id") @db.Integer
  createdAt DateTime @map("created_at") @db.Timestamp()
  updatedAt DateTime @map("updated_at") @db.Timestamp()

  employeeDetail EmployeeDetails[]

  @@map("emp_positions")
}
